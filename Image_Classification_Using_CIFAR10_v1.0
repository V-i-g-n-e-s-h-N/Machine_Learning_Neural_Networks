#Importing essential libraries
from tensorflow.keras.layers import Input, Conv2D, MaxPool2D
from tensorflow.keras.layers import ReLU, Dense, Flatten
from tensorflow.keras.models import Sequential
from tensorflow.keras.datasets import cifar10
import numpy as np
from sklearn.metrics import classification_report
from tensorflow.keras import Model
import matplotlib.pyplot as plt

#Importing the dataset and normalizing the data
(x_train, y_train), (x_test, y_test) = cifar10.load_data()
x_train = x_train.reshape(x_train.shape[0], 32, 32, 3)
x_test = x_test.reshape(x_test.shape[0], 32, 32, 3)
x_train = x_train.astype('float32') / 255.0
x_test = x_test.astype('float32') / 255.0


#Visualising the CIFAR10 dataset 
plt.imshow(x_train[4])
print(y_train[4])

#Generating the classification part of the network using a ANN and a CNN as a precursor to that.
model = Sequential()
model.add(Conv2D(filters=32, activation = "relu", kernel_size = (3,3), input_shape = (32, 32, 3)))
model.add(MaxPool2D(pool_size = (2,2), strides = 2))
model.add(Flatten())
model.add(Dense(64, activation = "relu"))
model.add(Dense(10, activation = "softmax"))
model.compile(optimizer = "adam", loss = "sparse_categorical_crossentropy")

#Training and evaluation of the neural network
model.fit(x_train, y_train, epochs = 10)

model.evaluate(x_test, y_test)

pred = model.predict(x_test)
pred2 = [np.argmax(i) for i in pred]
print(pred2)

print(classification_report(y_test, pred2))
